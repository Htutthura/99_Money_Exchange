name: 99 Money Exchange - Daily Backup & Database Operations

on:
  schedule:
    # Run daily at 2:00 AM UTC (10:00 AM Thailand time)
    - cron: '0 2 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      backup_type:
        description: 'Backup type'
        required: true
        default: 'both'
        type: choice
        options:
        - sql
        - json
        - both
      restore_to_staging:
        description: 'Restore to staging database'
        required: false
        default: false
        type: boolean

jobs:
  backup:
    runs-on: ubuntu-latest
    name: Create Database Backup
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        
    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        
    - name: Create backup directory
      run: mkdir -p backups
      
    - name: Run Django backup command
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: |
        cd backend
        python manage.py backup_database --format=${{ github.event.inputs.backup_type || 'both' }} --output-dir=../backups
        
    - name: Create SQL dump (direct method as fallback)
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        timestamp=$(date '+%Y%m%d_%H%M%S')
        pg_dump "$DATABASE_URL" > "backups/direct_backup_${timestamp}.sql"
        echo "‚úÖ Direct SQL backup created: direct_backup_${timestamp}.sql"
        
    - name: List backup files
      run: |
        echo "üìÅ Created backup files:"
        ls -la backups/
        
    - name: Upload backup artifacts
      uses: actions/upload-artifact@v4
      with:
        name: money-exchange-backup-${{ github.run_number }}
        path: backups/
        retention-days: 90  # Keep for 90 days
        
    - name: Upload to Google Drive (optional)
      if: false  # Enable this when you set up Google Drive API
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}
      run: |
        # TODO: Add Google Drive upload script
        echo "üöÄ Would upload to Google Drive here"

  restore-to-staging:
    runs-on: ubuntu-latest
    name: Restore to Staging Database
    needs: backup
    if: github.event.inputs.restore_to_staging == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        
    - name: Download backup artifacts
      uses: actions/download-artifact@v4
      with:
        name: money-exchange-backup-${{ github.run_number }}
        path: backups/
        
    - name: Restore to staging database
      env:
        STAGING_DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
      run: |
        # Find the latest SQL backup
        latest_backup=$(ls -t backups/*.sql | head -n 1)
        echo "üìä Restoring from: $latest_backup"
        
        # Drop existing data and restore
        psql "$STAGING_DATABASE_URL" -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
        psql "$STAGING_DATABASE_URL" < "$latest_backup"
        
        echo "‚úÖ Staging database restored successfully!"

  cleanup-old-artifacts:
    runs-on: ubuntu-latest
    name: Cleanup Old Backup Artifacts
    if: github.event_name == 'schedule'  # Only run on scheduled backups
    
    steps:
    - name: Delete old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          // Get all artifacts older than 90 days
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const ninetyDaysAgo = new Date();
          ninetyDaysAgo.setDate(ninetyDaysAgo.getDate() - 90);
          
          for (const artifact of artifacts.data.artifacts) {
            const createdAt = new Date(artifact.created_at);
            if (createdAt < ninetyDaysAgo && artifact.name.includes('money-exchange-backup')) {
              console.log(`üóëÔ∏è Deleting old artifact: ${artifact.name}`);
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
            }
          }

  health-check:
    runs-on: ubuntu-latest
    name: Database Health Check
    needs: backup
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        
    - name: Check database connectivity
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        echo "üîç Testing database connection..."
        psql "$DATABASE_URL" -c "SELECT COUNT(*) as total_tables FROM information_schema.tables WHERE table_schema = 'public';"
        
    - name: Check recent data
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        echo "üìä Checking recent transaction data..."
        psql "$DATABASE_URL" -c "
          SELECT 
            COUNT(*) as total_transactions,
            MAX(added_at) as latest_transaction
          FROM api_transaction 
          WHERE added_at >= NOW() - INTERVAL '7 days';
        " || echo "‚ö†Ô∏è Could not check api_transaction table"
        
        psql "$DATABASE_URL" -c "
          SELECT 
            COUNT(*) as total_legacy_transactions,
            MAX(date_time) as latest_legacy_transaction
          FROM transactions_transaction 
          WHERE date_time >= NOW() - INTERVAL '7 days';
        " || echo "‚ö†Ô∏è Could not check transactions_transaction table" 