# Generated by Django 5.2 on 2025-04-26 10:20

from django.db import migrations
from decimal import Decimal

def recalculate_profits(apps, schema_editor):
    """
    Recalculates profits for all transactions with related transactions
    using the corrected profit calculation logic.
    """
    Transaction = apps.get_model('api', 'Transaction')
    Currency = apps.get_model('api', 'Currency')
    
    # Only process transactions with related transactions
    for transaction in Transaction.objects.filter(related_transaction__isnull=False):
        # Skip if either transaction or related transaction is deleted
        if not Transaction.objects.filter(pk=transaction.related_transaction_id).exists():
            continue
            
        related = Transaction.objects.get(pk=transaction.related_transaction_id)
        
        # Constant currency codes
        thb_currency_code = "THB"
        mmk_currency_code = "MMK"
        
        # Set default profit to 0
        transaction.profit = Decimal('0.00')
        
        buy_transaction = None
        sell_transaction = None
        
        # Determine which is the buy and which is the sell transaction
        if transaction.transaction_type == 'BUY':  # Customer MMK → THB
            buy_transaction = transaction
            if related.transaction_type == 'SELL':  # Customer THB → MMK
                sell_transaction = related
        elif transaction.transaction_type == 'SELL':  # Customer THB → MMK
            sell_transaction = transaction
            if related.transaction_type == 'BUY':  # Customer MMK → THB
                buy_transaction = related
        
        # If we have both buy and sell transactions, calculate profit
        if buy_transaction and sell_transaction:
            # For BUY: customer gives MMK, gets THB
            # For SELL: customer gives THB, gets MMK
            
            # Check if this is a BUY (MMK→THB) followed by SELL (THB→MMK)
            if (buy_transaction.source_currency_id == Currency.objects.get(code=mmk_currency_code).id and
                buy_transaction.target_currency_id == Currency.objects.get(code=thb_currency_code).id and
                sell_transaction.source_currency_id == Currency.objects.get(code=thb_currency_code).id and
                sell_transaction.target_currency_id == Currency.objects.get(code=mmk_currency_code).id):
                
                # Calculate matched amount in THB
                matched_thb = min(buy_transaction.target_amount, sell_transaction.source_amount)
                
                # Calculate the rates (THB per 1 MMK)
                buy_rate_thb_per_mmk = buy_transaction.target_amount / buy_transaction.source_amount
                sell_rate_thb_per_mmk = sell_transaction.source_amount / sell_transaction.target_amount
                
                # Calculate the matched MMK amounts
                matched_mmk_buy = matched_thb / buy_rate_thb_per_mmk
                matched_mmk_sell = matched_thb / sell_rate_thb_per_mmk
                
                # Profit in THB = Difference in MMK converted to THB using the sell rate
                mmk_profit = matched_mmk_buy - matched_mmk_sell
                transaction.profit = mmk_profit * sell_rate_thb_per_mmk
            
            # Check if this is a SELL (THB→MMK) followed by BUY (MMK→THB)
            elif (sell_transaction.source_currency_id == Currency.objects.get(code=thb_currency_code).id and
                  sell_transaction.target_currency_id == Currency.objects.get(code=mmk_currency_code).id and
                  buy_transaction.source_currency_id == Currency.objects.get(code=mmk_currency_code).id and
                  buy_transaction.target_currency_id == Currency.objects.get(code=thb_currency_code).id):
                
                # Calculate matched amount in MMK
                matched_mmk = min(sell_transaction.target_amount, buy_transaction.source_amount)
                
                # Calculate the rates (THB per 1 MMK)
                sell_rate_thb_per_mmk = sell_transaction.source_amount / sell_transaction.target_amount
                buy_rate_thb_per_mmk = buy_transaction.target_amount / buy_transaction.source_amount
                
                # Calculate the matched THB amounts
                matched_thb_sell = matched_mmk * sell_rate_thb_per_mmk
                matched_thb_buy = matched_mmk * buy_rate_thb_per_mmk
                
                # Profit is simply the difference in THB
                transaction.profit = matched_thb_buy - matched_thb_sell
        
        # Save the updated profit
        transaction.save(update_fields=['profit'])


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0006_alter_googlesheetconfig_options_and_more'),
    ]

    operations = [
        migrations.RunPython(recalculate_profits, migrations.RunPython.noop),
    ]
